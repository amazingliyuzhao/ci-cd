# 结合docker的配置
# name: gitHub ActionTest

# on:
#   push:
#     branches:
#       - 'feature_dev'
#     paths:
#       - '.github/workflows/*'
#       - '__test__/**'
#       - 'src/**'
#       - 'config/*'
#       - 'Dockerfile'
#       - 'docker-compose.yml'
#       - 'nginx.conf'

# jobs:
#   deploy-dev:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v2
#       - name: Use Node.js
#         uses: actions/setup-node@v1
#         with:
#           node-version: 14
#       - name: lint and test # 测试
#          run: |
#            npm i
#            npm run lint
#            npm run test:local
#       - name: set ssh key # 临时设置 ssh key
#         run: |
#           mkdir -p ~/.ssh/
#           echo "${{secrets.COSEN_ID_RSA}}" > ~/.ssh/id_rsa
#           chmod 600 ~/.ssh/id_rsa
#           ssh-keyscan "106.xx.xx.xx" >> ~/.ssh/known_hosts
#       - name: deploy
#         run: |
#           ssh work@106.xx.xx.xx "
#             cd /home/work/choba-lego/admin-fe;
#             git remote add origin https://Cosen95:${{secrets.COSEN_TOKEN}}@github.com/Choba-lego/admin-fe.git;
#             git checkout feature_dev;
#             git config pull.rebase false;
#             git pull origin feature_dev;
#             git remote remove origin;

#             # 构建 prd-dev
#             # npm i;
#             # npm run build-dev;

#             # 启动 docker
#             docker-compose build admin-fe; # 和 docker-compose.yml service 名字一致
#             docker-compose up -d;
#           "
#       - name: delete ssh key
#         run: rm -rf ~/.ssh/id_rsa


#测试配置
# name: gitHub Action Test

# on:
#   push:
#     branches: 
#       - 'main'

# jobs:
#   deploy-dev:
#     runs-on: ubuntu-latest # 运行虚拟机，必填，centeros主机写这个即可

#     steps:
#       - uses: actions/checkout@v2
#       - name: Use Node.js
#         uses: actions/setup-node@v1
#         with:
#           node-version: 14
#       - name: lint and test # 测试
#         run: |
#           npm i
#           npm run build
#           echo build success-amaing
      

#上传到阿里云的配置
#https://blog.csdn.net/qq_35374262/article/details/108127204
name: Publish And Deploy Demo # 自动部署的名称
on:
  push:
    tags: # 当我们提交代码为tag 是以'v'开头的时候才会触发自动部署到服务端 如 git push tag v0.1.0
      - 'v*'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # 运行环境，告诉它运行在什么环境
    steps: # 步骤

    # 第一步：下载源码（CI/CD拉取代码到自己的本地）
    - name: Checkout
      uses: actions/checkout@master

    # 第二步：打包构建
    - name: Build
      uses: actions/setup-node@master
    - run: npm install # 安装第三方包
    - run: npm run build # 打包
    - run: tar -zcvf release.tgz package.json package-lock.json 
      # 把.nuxt、nuxt.config.js等文件，打包压缩为release.tgz

    # 第三步：发布 Release
    - name: Create Release # 创建Release，可以在仓库看到一个个版本
      id: create_release
      uses: actions/create-release@master
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }} # 之前GitHub添加的Token
      with:
        tag_name: ${{ github.ref }} # (tag)标签名称
        release_name: Release ${{ github.ref }}
        draft: false # 是否是草稿
        prerelease: false # 是否是预发布

    # 第四步：上传构建结果到 Release（把打包的tgz上传到Release）
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@master
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # 上传地址，通过创建Release获取到的
        asset_path: ./release.tgz # 要上传文件
        asset_name: release.tgz # 上传后的文件名
        asset_content_type: application/x-tgz

    # 第五步：部署到服务器
    - name: Deploy
      uses: appleboy/ssh-action@master # 使用ssh链接服务器
      with:
        host: 39.107.15.62
        username: root
        password: Lx987621
        port: 22
        script: | # 执行命令（运行到服务器）cd：要确保服务器有这个目录； wget：下载上一步的release到服务器； tar：解压； 安装依赖；启动服务
          cd /root/testFlie
          wget https://github.com/amazingliyuzhao/ci-cd/releases/latest/download/release.tgz -O release.tgz
          tar zxvf release.tgz
          npm install --production




